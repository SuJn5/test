    git 운영법 (git flow)

        branch
            하나의 배포중인 서비스 (나무)
            그리고 branch라고 하는 것은 특정 기능을 개발하거나 버그를 수정하거나 할 때
            또 하나의 길을 만들어내는 것

        add/commit
            add
                - 스테이징, 깃에서 수정된 파일을 보내기 전에 준비
            commit 
                - 깃에 파일을 보내는 것, 저장

        push/pull

            push   
                - commit된 파일을 git에 있는 저장소에 등록 (레퍼지토리)에 등록
            pull
                - 업데이트 된 git 저장소의 코드(파일)을 내 파일에 가지고 오는 것(적용)
                  현재 배포된 버전과 내 컴퓨터에 존재하는 내 버전과 맞추는 것

        pull request
            허락, merge 실행 시 데이터가 바로 적용되는 것이 아니라 pull requrest에 
            등록하고  reaquest에 등록된 사항을 허용해주어야 기본 branch에 push가 되는
            현상
            (내가 코드 수정했으니 검토해봐 -> 컨펌 받을 때)

        merge
            새로 만들어지는 브런치와 기본 브런치를 합치는 것

        git flow
            - flow 전략은 회사마다 다르지만 그 형태는 거의 비슷

            hotfix (일시적) -- 버그 수정
            release (일시적) -- 새로운 버전 테스트용 (dev 클론)
            feature (일시적) -- 기능 추가


        dev --------------------------------------------------->> (본체 클론)
        main/master ------------------------------------------->> (배포, 본체)

------------------------------------------------------------------------------

    git commit 컨벤션
        git에 올릴 코드를 스테이징하고 커밋을 할 시 커밋의 상태를 나타내는 메시지를
        함께 전달

        ex)
        feat : 새로운 기능 추가
        fix : 버그 수정
        docs : 문서 수정
        style : 코드 포맷팅(코드의 스타일 수정, 코드 변경은 없어야함)
        refactor : 코드 리펙토링
        test : 테스트 단위 추가
        chore : 


    issue tracker란?

        개발 시 발생되는 버그와 논쟁, 논점(개발자들끼리의 논쟁)
        이러한 이슈들을 기록하고 해당 이슈가 되면 이슈를 닫음으로서 (닫힌 이슈는
        히스토리에서 확인이 가능)

        이슈 등록 시 이슈에 대한 내용과 앞에 번호를 붙여서 만들어 줌
        ex) 사용자 데이터를 받아왔으나 ...  map is not function... #10

        해당 이슈가 되는 커밋 메시지에

        close
        closed
        fix
        fixed
        resolove

        라는 깃 컨벤션과 앞에 이슈 번호르 붙여서 커밋
        ex) colse #10

        ++ github action / 이슈 등록시 자동으로 브랜치 생성 해결 시 자동 삭제

------------------------------------------------------------------------------

    터미널 경로 명령어

    cd 경로 ==> 해당 경로로 이동(폴더명=>하위폴더, 절대경로=>절대경로)
    cd .. ==> 경로 상위 폴더로 이동

------------------------------------------------------------------------------   

깃 로직 명령어

1. git init => 숨김 폴더로 .git이라는 폴더가 생성
+ .gitignore (깃허브에 올리고 싶지 않은 폴더 정의)

2. git remote add origin "깃허브 레퍼지토리 주소"
 => 깃허브 레퍼지토리와 연결  

3. git add . (여기까지 함)
=> 해당 경로에 있는 모든 파일을 스테이징

4. git commit -m "커밋메시지"
=> 커밋메시지 내용으로 스테이징 되어있는 파일을 깃에 저장소


             (2.의 remote 이름과 같아야 함)
5. git push -u origin <branch> / git push
=> 깃에 커밋된 코드를 올리는 것 (밀어넣다)
ex) git push origin master/main

6. git pull origin <branch> / git pull
=> 깃에 업데이트 된 내용을 내려받는 것 (땡겨온다)
=> 에러를 막기 위해 보통 푸쉬 전 항상 풀을 받고 진행

------------------------------------------------------------------------------   

    git branch 브랜치명 (브랜치 생성)
    git checkout 브랜치명 (브랜치 focus)
    git branch -d 브랜치명 (브랜치 삭제)

    * git branch로 현재 생성되어 있는 브랜치가 무엇인지 확인가능

    ex)
        git branch dev (dev 브랜치 생성)
        git checkout dev (dev 브랜치 이동)
        git push (dev 브랜치에 현재 코드 복사)

        git branch feature
        git add . / commit

        git checkout dev
        git merge feature

        git push
        git branch -d feature